
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Starter pipeline



variables:
- group: testvariable
- name: dockerId
  value: 'mydevopstest'
- name: imageName
  value: 'imagenametest'

trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'
    
- script: |
    pip install flask
    pip install pytest
    pip install pytest-cov
    pytest app.py --doctest-modules --junitxml=testresults.xml --cov=com --cov-report=xml --cov-report=html
  displayName: 'Test with pytest'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: 'testresults.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'

- script: npm init -y
  displayName: 'Run a one-line script'

- script: npm install -D sonarqube-scanner
  displayName: 'Run a one-line script'

- script: ./node_modules/sonarqube-scanner/dist/bin/sonar-scanner -Dsonar.projectKey=testpython -Dsonar.sources=.  -Dsonar.host.url=http://13.67.39.98:9000  -Dsonar.login=bb5905c40b44eca1d95c96a09d03fbeb9bb8b558
  displayName: 'Run check sonarqube'

- script: ls -lah
  displayName: 'list dir'
- script: chmod +x bash.sh 
  displayName: 'add script'
  
- script: ./bash.sh bb5905c40b44eca1d95c96a09d03fbeb9bb8b558 13.67.39.98:9000 .scannerwork/report-task.txt
  displayName: 'run Script'

- script: |
    docker build -t $(dockerId)/$(imageName):$(build.buildid) .
  displayName: 'build image'

- script: docker run -d -p 5000:5000 $(dockerId)/$(imageName):$(build.buildid)
  displayName: 'run test app'

- script: sleep 5
  displayName: 'run wait'
    
- script: curl localhost:5000
  displayName: 'test app live'
  
